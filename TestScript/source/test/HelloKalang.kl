class<T>{
    int f = 6;
    static int  sf = 6;
    int fieldTest(){
        return f;
    }
    int fieldStaticTest(){
        return sf;
    }
    int nullTest(){
        String s = null;
        if(s==null){
            s = "test";
        }
        if(s!=null) return 6;
        else return 1;
    }
    int test(){
        return 6;
    }
    int inc(){
        int i=5;
        i++;
        return i;
    }
    int ifStmt(){
        int i = 3;
        int j = 4;
        //return j;
        if(i == 3){
            j++;
            if( i < 6) j++; 
        }else{
            return 0;
        }
        return j;
    }
    
    int ifBinary(){
        int i = 1;
        int j = 2;
        if(i==1 && j ==2){
            return 6;
        }else{
            return 1;
        }
    }
    int ifBinaryLogic(){
        boolean t = false;
        boolean t2 = false;
        if(!t && !t2) return 6;
        return 1;
    }
    int forStmt(){
        int j=0;
        for(int i=0;i<6;i++){
                j++;
        }
        return j;
    }
    int whileStmt(){
        int i=1;
        while(i<6) i++;
        return i;
    }
    
    int invoaction(){
        return whileStmt();
    }
    
    int not(){
        int i = -7;
        return ~i;
    }
    int tryStmt(){
        try{
            throw new Exception("test");
        }catch(Exception ex){
            return 6;
        }
    }
    
    int dynamicInvoke() throws Exception{
        return ((Integer)this->not()).intValue();
    }
    
    int property() throws Exception{
        this->f = 6;
        return this->f;
    }
            
    int genericList(){
        var list = new LinkedList<Integer>();
        list.add(6);
        //list.add("test");
        return list.get(0);
    }
    
    /*
    
    int dynamicField() throws Exception{
        this->f = 6;
        return (Integer)this->f;
    }
    */
    
}